#include <SPI.h>
#include <SD.h>
#include <IFCT.h>
CAN_message_t RX_msg, TX_msg;
long time;
int inc_time = 0;
int col = 0;
int row = 0;
byte ID_temp_1 = 0x0A0;
byte ID_temp_2 = 0x0A1;
byte ID_temp_3 = 0x0A2;
byte ID_motor_poition = 0x0A5;
byte ID_current = 0x0A6;
byte ID_voltage = 0x0A7;
byte ID_faults = 0x0AB;

struct Motor_controller_CAN_data
{
  byte id_offset = 0;
  String motor_name = "";
  float temp_phase_A = 0;
  float temp_phase_B = 0;
  float temp_phase_C = 0;
  float temp_driver_board = 0;

  float temp_control_board = 0;

  float temp_motor = 0;

  float sensor_angle = 0;
  float angular_velocity = 0;
  float electrical_frequncy = 0;

  float current_PA = 0;
  float current_PB = 0;
  float current_PC = 0;
  float current_DC = 0;

  float voltage_DC = 0;
  float voltage_output = 0;
  float voltage_AB = 0;
  float voltage_BC = 0;

  bool faults[8][8];
  
}motor_0,motor_1;

String faults_decoder[8][8] = 
{
  {
    "Harawre Gate/Desaturation Fault",
    "HW over-current Fault",
    "Accelerator shorted",
    "Accelerator Open",
    "Current sensor Low",
    "Current sensor High",
    "Module Tempature Low",
    "Module Tempature High"
  },
  {
    "Control PCB Temperature Low",
    "Control PCB Temperature High",
    "Gate Dive PCB Temperature Low",
    "Gate Dive PCB Temperature High",
    "5V Sense Voltage Low",
    "5V Sense Voltage High",
    "12V Sense Voltage Low",
    "12V Sense Voltage High"
  },
  {
    "2.5V Sense Voltage Low",
    "2.5V Sense Voltage High",
    "1.5V Sense Voltage Low",
    "2.5V Sense Voltage High",
    "DC Bus Voltage High",
    "DC Bus Voltage Low",
    "Precharge Timeout",
    "Precharge Voltage Failure"
  },
  {
    "EEPROM Checksum Invalid",
    "EEPROM Data Out of Range",
    "EEPROM Update Required",
    "Reserved",
    "Reserved",
    "Reserved",
    "Brake Shorted",
    "Brake Open"
  },
  {
    "Motor Over-speed Fault",
    "Over-current Fault",
    "Over-voltage Fault",
    "Inverter Over-temperature Fault",
    "Accelerator Input Shorted Fault",
    "Accelerator Input Open Fault",
    "Direction Command Fault",
    "Inverter Response Time-out Fault"
  },
  {
    "Hardware Gate/Desaturation Fault_2",
    "Hardware Over-current Fault_2",
    "Under-voltage Fault",
    "CAN Command Message Lost Fault",
    "Motor Over-temperature Fault",
    "Reserved",
    "Reserved",
    "Reserved"
  },
  {
    "Brake Input Shorted Fault",
    "Brake Input Open Fault",
    "Module A Over-temperature Fault7",
    "Module B Over-temperature Fault7",
    "Module C Over-temperature Fault7",
    "PCB Over-temperature Fault7",
    "Gate Drive Board 1 Over-temperature Fault",
    "Gate Drive Board 2 Over-temperature Fault7"
  },
  {
    "Gate Drive Board 3 Over-temperature Fault7",
    "Current Sensor Fault",
    "Reserved",
    "Reserved",
    "Reserved",
    "Reserved",
    "Resolver Not Connected",
    "Inverter Discharge Active"
  }
};
 
const int chipSelect = BUILTIN_SDCARD;
void setup() 
{
  Serial.print("Initializing SD card...");
  // see if the card is present and can be initialized:
  while (1) 
  {
    if (SD.begin(chipSelect))
    {
      break;
    }
  }
  Serial.println("card initialized.");
  
  // Set ID offset
  motor_1.id_offset = 0x30;
  motor_0.id_offset = 0x0;
  //Motor names
  motor_1.motor_name = "M1";
  motor_0.motor_name = "M0";

// Sets all faults to zero
  for (int i = 0; i < 8; ++i)
  {
    for (int k = 0; i < 8; ++i)
    {
      motor_1.faults[i][k] = 0;
      motor_0.faults[i][k] = 0;
    }
  }
  pinMode(13, OUTPUT); // On board LED to know if code is running 
  digitalWrite(13,HIGH);
  Can1.setBaudRate(500000);
  Can1.enableFIFO();
}
void loop() 
{
  read_can();
  time = millis();
  // make a string for assembling the data to log:
  if (((time - 500) > inc_time))
  {
    print_fault_1(motor_1);
    print_fault_0(motor_0);
    File dataFile = SD.open("M1D.txt", FILE_WRITE); // Data logging

    inc_time = time; // timer
    String dataString = millis();
    dataString += ",";
    dataString += (motor_1.temp_phase_A/10);
    dataString += ",";
    dataString += (motor_1.temp_phase_B/10);
    dataString += ",";
    dataString += (motor_1.temp_phase_C/10);
    dataString += ",";
    dataString += (motor_1.temp_driver_board/10);
    dataString += ",";
    dataString += (motor_1.temp_control_board/10);
    dataString += ",";
    dataString += (motor_1.temp_motor/10);
    dataString += ",";
    dataString += (motor_1.sensor_angle/10);
    dataString += ",";
    dataString += (motor_1.angular_velocity/10);
    dataString += ",";
    dataString += (motor_1.electrical_frequncy/10);
    dataString += ",";
    dataString += (motor_1.current_PA/10);
    dataString += ",";
    dataString += (motor_1.current_PB/10);
    dataString += ",";
    dataString += (motor_1.current_PC/10);
    dataString += ",";
    dataString += (motor_1.current_DC/10);
    dataString += ",";
    dataString += (motor_1.voltage_DC/10);
    dataString += ",";
    dataString += (motor_1.voltage_output/10);
    dataString += ",";
    dataString += (motor_1.voltage_AB/10);
    dataString += ",";
    dataString += (motor_1.voltage_BC/10);
    dataString += ",";
    dataString += (motor_1.current_DC/10);
    if (dataFile) 
    {
      dataFile.println(dataString);
      dataFile.close();
    }

    dataFile = SD.open("M0D.txt", FILE_WRITE); // Data logging   
    String dataString_ = millis();
    dataString_ += ",";
    dataString_ += (motor_0.temp_phase_A/10);
    dataString_ += ",";
    dataString_ += (motor_0.temp_phase_B/10);
    dataString_ += ",";
    dataString_ += (motor_0.temp_phase_C/10);
    dataString_ += ",";
    dataString_ += (motor_0.temp_driver_board/10);
    dataString_ += ",";
    dataString_ += (motor_0.temp_control_board/10);
    dataString_ += ",";
    dataString_ += (motor_0.temp_motor/10);
    dataString_ += ",";
    dataString_ += (motor_0.sensor_angle/10);
    dataString_ += ",";
    dataString_ += (motor_0.angular_velocity/10);
    dataString_ += ",";
    dataString_ += (motor_0.electrical_frequncy/10);
    dataString_ += ",";
    dataString_ += (motor_0.current_PA/10);
    dataString_ += ",";
    dataString_ += (motor_0.current_PB/10);
    dataString_ += ",";
    dataString_ += (motor_0.current_PC/10);
    dataString_ += ",";
    dataString_ += (motor_0.current_DC/10);
    dataString_ += ",";
    dataString_ += (motor_0.voltage_DC/10);
    dataString_ += ",";
    dataString_ += (motor_0.voltage_output/10);
    dataString_ += ",";
    dataString_ += (motor_0.voltage_AB/10);
    dataString_ += ",";
    dataString_ += (motor_0.voltage_BC/10);
    dataString_ += ",";
    dataString_ += (motor_0.current_DC/10);
    if (dataFile) 
  {
    dataFile.println(dataString_);
    dataFile.close();
  }

 }
}

  


void read_can()
{
  //canSniff(RX_msg); // Check data
  if ( Can1.read(RX_msg)) 
  {
    //Serial.println("Motor 1");
    //canSniff(RX_msg); // Check data 
    
    
    motor_1.temp_phase_A = read_signed_data(ID_temp_1 + motor_1.id_offset, 0, motor_1.temp_phase_A); // C
    motor_1.temp_phase_B = read_signed_data(ID_temp_1 + motor_1.id_offset, 1, motor_1.temp_phase_B);
    motor_1.temp_phase_C = read_signed_data(ID_temp_1 + motor_1.id_offset, 2, motor_1.temp_phase_C);
    motor_1.temp_driver_board = read_signed_data(ID_temp_1 + motor_1.id_offset, 3, motor_1.temp_driver_board);
  
    motor_1.temp_control_board = read_signed_data(ID_temp_2 + motor_1.id_offset, 0, motor_1.temp_control_board); 
    
    motor_1.temp_motor = read_signed_data(ID_temp_3 + motor_1.id_offset, 2, motor_1.temp_motor); 
    
    motor_1.sensor_angle = read_signed_data(ID_motor_poition + motor_1.id_offset, 0, motor_1.sensor_angle); // degrees
    motor_1.angular_velocity = read_signed_data(ID_motor_poition + motor_1.id_offset, 1, motor_1.angular_velocity) ; // RPM
    motor_1.electrical_frequncy = read_signed_data(ID_motor_poition + motor_1.id_offset, 2, motor_1.electrical_frequncy) / 10; // Hz

    motor_1.current_PA = read_signed_data(ID_current + motor_1.id_offset, 0, motor_1.current_PA); // Amps
    motor_1.current_PB = read_signed_data(ID_current + motor_1.id_offset, 1, motor_1.current_PB);
    motor_1.current_PC = read_signed_data(ID_current + motor_1.id_offset, 2, motor_1.current_PC);
    motor_1.current_DC = read_signed_data(ID_current + motor_1.id_offset, 3, motor_1.current_DC);

    motor_1.voltage_DC = read_signed_data(ID_voltage + motor_1.id_offset, 0, motor_1.voltage_DC); // Volts
    motor_1.voltage_output = read_signed_data(ID_voltage + motor_1.id_offset, 1, motor_1.voltage_output);
    motor_1.voltage_AB = read_signed_data(ID_voltage + motor_1.id_offset, 2, motor_1.voltage_AB);
    motor_1.voltage_BC = read_signed_data(ID_voltage + motor_1.id_offset, 3, motor_1.voltage_BC);
  
    // Read faults
    read_fault_data_motor_1();
  }
  else if(Can0.read(RX_msg))
  {
    //Serial.println("Motor 0");
    //canSniff(RX_msg); // Check data 
    
    motor_0.temp_phase_A = read_signed_data(ID_temp_1 + motor_0.id_offset, 0, motor_0.temp_phase_A); // C
    motor_0.temp_phase_B = read_signed_data(ID_temp_1 + motor_0.id_offset, 1, motor_0.temp_phase_B);
    motor_0.temp_phase_C = read_signed_data(ID_temp_1 + motor_0.id_offset, 2, motor_0.temp_phase_C);
    motor_0.temp_driver_board = read_signed_data(ID_temp_1 + motor_0.id_offset, 3, motor_0.temp_driver_board);
  
    motor_0.temp_control_board = read_signed_data(ID_temp_2 + motor_0.id_offset, 0, motor_0.temp_control_board); 
    
    motor_0.temp_motor = read_signed_data(ID_temp_3 + motor_0.id_offset, 2, motor_0.temp_motor); 
    
    motor_0.sensor_angle = read_signed_data(ID_motor_poition + motor_0.id_offset, 0, motor_0.sensor_angle); // degrees
    motor_0.angular_velocity = read_signed_data(ID_motor_poition + motor_0.id_offset, 1, motor_0.angular_velocity) ; // RPM
    motor_0.electrical_frequncy = read_signed_data(ID_motor_poition + motor_0.id_offset, 2, motor_0.electrical_frequncy) / 10; // Hz

    motor_0.current_PA = read_signed_data(ID_current + motor_0.id_offset, 0, motor_0.current_PA); // Amps
    motor_0.current_PB = read_signed_data(ID_current + motor_0.id_offset, 1, motor_0.current_PB);
    motor_0.current_PC = read_signed_data(ID_current + motor_0.id_offset, 2, motor_0.current_PC);
    motor_0.current_DC = read_signed_data(ID_current + motor_0.id_offset, 3, motor_0.current_DC);

    motor_0.voltage_DC = read_signed_data(ID_voltage + motor_0.id_offset, 0, motor_0.voltage_DC); // Volts
    motor_0.voltage_output = read_signed_data(ID_voltage + motor_0.id_offset, 1, motor_0.voltage_output);
    motor_0.voltage_AB = read_signed_data(ID_voltage + motor_0.id_offset, 2, motor_0.voltage_AB);
    motor_0.voltage_BC = read_signed_data(ID_voltage + motor_0.id_offset, 3, motor_0.voltage_BC);
    
    // Read faults
    read_fault_data_motor_0();
  }
}

int read_signed_data(byte ID, byte position_1, int pre_data) // Position (0,1,2,3) inside data structure of data
{
  byte low_byte = position_1 * 2;
  byte high_byte = low_byte + 1;
  int value = pre_data; // Value set so the number never changes when ID is not true
  if (RX_msg.id == ID) // ID of motor array
    {
      long full_data = (RX_msg.buf[high_byte] * 255) + RX_msg.buf[low_byte];
      if(RX_msg.buf[high_byte] < 128)
      {
        value = full_data;
      }
      else if(RX_msg.buf[high_byte] > 128)
      {
        value = map(full_data,65280,32640,0,-32640);
      }
    }
  return value;
}

void read_fault_data_motor_1()
{
  if (RX_msg.id == ID_faults + motor_1.id_offset)
  {
    for (int col = 0; col < 8; ++col) // for each byte
    {
      if (RX_msg.buf[col]) // If the byte has info
      {
        for (int row = 0; row < 8; ++row) // for each bit
        {
          if (((RX_msg.buf[col] >> row) & 0B00000001)) // If each bit is true, store value
          {
            motor_1.faults[col][row] = 1;
          }
          else // No error
          {
            motor_1.faults[col][row] = 0; 
          }
        }
      }
    }
  }
}

void read_fault_data_motor_0()
{
  if (RX_msg.id == ID_faults + motor_1.id_offset)
  {
    for (int col; col < 8; ++col) // for each byte
    {
      if (RX_msg.buf[col]) // If the byte has info
      {
        for (row = 0; row < 8; ++row) // for each bit
        {
          if (((RX_msg.buf[col] >> row) & 0B00000001)) // If each bit is true, store value
          {
            motor_0.faults[col][row] = 1;
          }
          else // No error
          {
            motor_0.faults[col][row] = 0; 
          }
        }
      }
    }
  }
}

void print_fault_0(Motor_controller_CAN_data motor)
{
  for (int i = 0; i < 8; ++i)
  {
    for (int k = 0; k < 8; ++k)
    {
      if(motor.faults[i][k])
      {
        String fault_name = faults_decoder[i][k];
        File dataFile = SD.open("M0F.txt", FILE_WRITE); // Data logging   
        dataFile.println(fault_name);
        dataFile.close();
      } 
    }
  }
}

void print_fault_1(Motor_controller_CAN_data motor)
{
  for (int i = 0; i < 8; ++i)
  {
    for (int k = 0; k < 8; ++k)
    {
      if(motor.faults[i][k])
      {
        String fault_name = faults_decoder[i][k];
        File dataFile = SD.open("M1F.txt", FILE_WRITE); // Data logging   
        dataFile.println(fault_name);
        dataFile.close();
      } 
    }
  }
}
